# Compiled JavaScript files
lib/
*.js
*.js.map

# TypeScript cache
*.tsbuildinfo

# Dependency directories
node_modules/

# Firebase cache
.firebase/

# Firebase config file containing sensitive information
# Uncomment this if you'd rather keep your firebase.json private
# firebase.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Rust-specific files for canister backend
# Compiled Rust binaries
target/
**/*.rs.bk
*.pdb

# Cargo lock file (uncomment if you want to ignore it)
# Cargo.lock

# Internet Computer (IC) canister-specific files
.dfx/
.vessel/
canister_ids.json
.ic-assets.json

# WASM files
*.wasm
*.wasm.gz

# IC-specific build artifacts
.dfinity/
dfx.json.backup

# Candid interface files (generated)
*.did

# IC replica state
.replica-configuration/

# Motoko-specific (if using Motoko alongside Rust)
.moc/
.mo/

# Additional Rust toolchain files
rust-toolchain
rust-toolchain.toml